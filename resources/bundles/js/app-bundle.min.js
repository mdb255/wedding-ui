(function() {
  'use strict';

  angular.module('weddingApp', [
    'ngRoute',
    'ngAnimate',
    'ui.bootstrap',
    'appConfig',
    'LocalStorageModule'
  ]).
    run(['$rootScope', '$location', '$log', function($rootScope, $location, $log) {
      // Watch the URL location to update the active tab on the navbar
      var path = function() { return $location.path(); };
      $rootScope.$watch(path, function(newVal, oldVal) {
        $rootScope.activeTab = newVal;
        $log.debug("ActiveTab: " + $rootScope.activeTab);
      });
    }]);

})();

/**
 * Created by Mike on 11/8/2015.
 */

(function() {
  'use strict';

  angular.
    module('weddingApp').
    config(['$routeProvider', function($routeProvider) {
      $routeProvider
        .when('/rsvp', {
          templateUrl: '/wedding-app/components/rsvp/rsvp.html',
          controller: 'RsvpCtrl'
        })
        .when('/hotels', {
          templateUrl: '/wedding-app/components/hotels/hotels.html',
          controller: 'HotelsCtrl'
        })
        .when('/registry', {
          templateUrl: '/wedding-app/components/registry/registry.html',
          controller: 'RegistryCtrl'
        })
        .when('/home', {
          templateUrl: '/wedding-app/components/home/home.html',
          controller: 'HomeCtrl'
        })
        .when('/venue', {
          templateUrl: '/wedding-app/components/venue/venue.html',
          controller: 'VenueCtrl'
        })
        .when('/cart', {
          templateUrl: '/wedding-app/components/cart/cart.html',
          controller: 'CartCtrl',
          // TODO Switch the rest of the controllers to use this "controllerAs vm" syntax
          controllerAs: 'vm'
        });
      $routeProvider.otherwise({redirectTo: '/home'});
    }]);
})();

/**
 * Created by Mike on 5/4/2015.
 */

(function() {
  'use strict';

  angular.module('appConfig',[])
    .constant('appConfig',
    {
      'apiUrl': 'http://localhost:8080/wedding-ws/v1',
      'webRootPath': '/src/wedding-website/app/'
    });
})();

/**
 * Created by Mike on 5/25/2015.
 */

(function() {
  'use strict';

  angular.module('adminApp', ['appConfig']);

  angular
    .module('adminApp')
    .controller('AdminCtrl', AdminCtrl);

  AdminCtrl.$inject = ['$scope', '$log', '$http', 'appConfig'];

  function AdminCtrl($scope, $log, $http, appConfig) {
    $http.get(appConfig.apiUrl + '/rsvps').success(function(data) {
      $log.debug("data: " + JSON.stringify(data));

      $scope.rsvps = data;
    });
  }
})();

(function() {
  'use strict';

  angular
    .module('weddingApp')
    .controller('CartCtrl', CartCtrl);

  CartCtrl.$inject = ['$scope', '$log', '$window', '$modal', 'cartSvc'];

  function CartCtrl($scope, $log, $window, $modal, cartSvc) {
    $window.scrollTo(0, 0);

    var vm = this;
    initialize();

    vm.removeCartItem = removeCartItem;
    vm.checkout = checkout;

    function removeCartItem(itemId) {
      var newCartItems = _.filter(vm.cart.items, function(id) { return id.itemId !== itemId; });
      cartSvc.saveCartItems(newCartItems);
      $log.debug("Removed item with id=" + itemId);
    }

    function checkout() {
      var modalInstance = $modal.open({
        templateUrl: 'checkout.html',
        controller: 'CheckoutModalCtrl',
        backdrop: 'static',
        size: 'md',
        resolve: {
          cartItems: function() { return vm.cart.items; },
          totalPrice: function() { return vm.cart.totalPrice; }
        }
      });

      modalInstance.result.then(function (status) {
        $log.debug('Modal OKed at: ' + new Date());
        $window.scrollTo(0, 0);
      }, function () {
        $log.debug('Modal dismissed at: ' + new Date());
      });
    }

    function updateTotalPrice() {
      var itemPrices = _.map(vm.cart.items, function(item) {
        return item.price;
      });
      vm.cart.totalPrice = _.reduce(itemPrices, function(price1, price2) {
        return price1 + price2;
      }, 0);
    }

    function updateIsEmpty() {
      vm.cart.isEmpty = (vm.cart.items.length === 0);
    }

    function initialize() {
      cartSvc.loadCartItems();
      vm.cart = cartSvc.getCart();

      $scope.$watch(function() { return vm.cart.items; }, function() {
        updateTotalPrice();
        updateIsEmpty();
      });
    }
  }
})();

/**
 * Created by Mike on 11/8/2015.
 */

(function() {
  'use strict';

  angular
    .module('weddingApp')
    .factory('cartModel', cartModel);

  cartModel.$inject = [];

  function cartModel() {
    return {
      cart: {
        items: {}
      }
    };
  }
})();

/**
 * Created by Mike on 10/31/2015.
 */

(function() {
  'use strict';

  angular
    .module('weddingApp')
    .factory('cartSvc', cartSvc);

  cartSvc.$inject = ['$log', 'localStorageService', 'cartModel'];

  function cartSvc($log, localStorageService, cartModel) {
    var service = {
      getCart: getCart,
      loadCartItems: loadCartItems,
      saveCartItems: saveCartItems,
      clearCart: clearCart
    };
    return service;

    function getCart() {
      return cartModel.cart;
    }

    function loadCartItems() {
      var result = [];
      // TODO extract constant
      var cartItemsStr = localStorageService.get('amwedding.cartItems');

      // TODO validate the stored data
      if (cartItemsStr !== undefined && cartItemsStr !== null) {
        result = JSON.parse(cartItemsStr);
      }

      updateCartItems(result);
      return result;
    }

    // TODO expose add + remove instead of save?
    function saveCartItems(items) {
      updateCartItems(items);
      localStorageService.set('amwedding.cartItems', JSON.stringify(items));
      $log.debug("Saved items to cart: " + JSON.stringify(items));
    }

    function clearCart() {
      localStorageService.remove('amwedding.cartItems');
      updateCartItems([]);
      $log.debug("Cleared cart!");
    }

    /** Private **/

    function updateCartItems(cartItems) {
      cartModel.cart.items = cartItems;
    }
  }
})();

/**
 * Created by Mike on 11/7/2015.
 */

(function() {
  'use strict';

  angular
    .module('weddingApp')
    .controller('CheckoutModalCtrl', CheckoutModalCtrl);

  CheckoutModalCtrl.$inject = ['$scope', '$log', '$modalInstance', '$http', '$window',
    'cartSvc', 'errorHandlingSvc', 'cartItems', 'totalPrice', 'appConfig'];

// TODO refactor cartItems/totalPrice into one object
  function CheckoutModalCtrl($scope, $log, $modalInstance, $http, $window,
                             cartSvc, errorHandlingSvc, cartItems, totalPrice, appConfig) {

    $scope.submit = submit;
    $scope.cancel = cancel;
    $scope.ok = ok;
    $scope.print = print;

      $scope.checkoutItems = cartItems;
    $scope.checkoutTotal = totalPrice;
    $scope.deliveryMethod = "";
    $scope.isFS = false;
    $scope.isSubmitSuccess = false;
    $scope.isReqSuccess = false;

    function submit(isFormValid) {
      $scope.isFS = true;

      if (isFormValid) {
        $scope.isSubmitSuccess = true;

        var mapCheckoutItemToPurchase = function(checkoutItem) {
          var result = {};
          result.registryItemId = checkoutItem.itemId;
          result.price = checkoutItem.price;
          result.customDescription = checkoutItem.description;
          result.purchasedByNames = $scope.fromNames;
          result.purchasedByEmail = $scope.fromEmail;
          result.deliveryMethod = $scope.deliveryMethod;

          return result;
        };

        var purchaseVmList = _.map($scope.checkoutItems, mapCheckoutItemToPurchase);

        $http.post(appConfig.apiUrl + '/purchases', purchaseVmList).
          success(function(data) {
            $scope.isReqSuccess = true;
            $log.debug("purchase post reply: " + JSON.stringify(data));
            cartSvc.clearCart();
          }).
          error(function(data, status) {
            $modalInstance.dismiss('error');
            errorHandlingSvc.handleHttpError("submitting your registry choices", status);
          });
      }
    }

    function cancel() {
      $modalInstance.dismiss('cancel');
    }

    function ok() {
      $modalInstance.close('ok');
    }

    function print() {
      var giftWindow = $window.open(createLink(), '_blank');
      giftWindow.print();
    }

    function createLink() {
      var itemDescs = _.map($scope.checkoutItems, function(item) { return item.description; });
      var itemDescsStr = JSON.stringify(itemDescs);
      var result = 'wedding-app/components/gift-card/gift.html#/?from=' + encodeURIComponent($scope.fromNames) + '&items=' + encodeURIComponent(itemDescsStr);
      return result;
    }
  }
})();

(function() {
  'use strict';

  angular
    .module('weddingApp')
    .controller('HomeCtrl', HomeCtrl);

  HomeCtrl.$inject = ['$scope', '$window', 'simpleModalsSvc'];

  function HomeCtrl($scope, $window, simpleModalsSvc) {

    $window.scrollTo(0, 0);

    if ($window.screen.width < 1200) {
      simpleModalsSvc.openSimpleModal("Hello!", "We noticed based on your screen size that you are using a mobile device. While the site does support this, you'll still get the optimal experience on a laptop or desktop. Enjoy!", "md");
    }

    $scope.whenSlideShowReady = whenSlideShowReady;

    $scope.imgFilenames = [
      "r1.jpg",
      "g1.jpg",
      "b1.jpg",
      "r2.jpg",
      "g2.jpg",
      "b2.jpg",
      "r3.jpg",
      "g3.jpg",
      "b3.jpg"
      // FIXME Add custom photos for slideshow
    ];

    function whenSlideShowReady() {
      $('#ri-grid').gridrotator( {
        rows: 3,
        columns: 5,

        animSpeed: 700,
        animType: 'random',
        interval: 4000,
        minStep: 3,
        maxStep: 7,

        preventClick: false,

        w1024: {
          rows: 3,
          columns: 5
        },
        w768: {
          rows: 4,
          columns: 3
        },
        w480: {
          rows: 4,
          columns: 3
        },
        w320: {
          rows: 4,
          columns: 3
        },
        w240: {
          rows: 4,
          columns: 3
        }
      });
    }
  }
})();

/**
 * Created by Mike on 4/26/2015.
 */

(function() {
  'use strict';

  var gift = angular.module('giftApp', []);

  gift.config(function($locationProvider) {
    //$locationProvider.html5Mode(true);
  });

  gift.controller('GiftCtrl', function ($scope, $location, $log) {
    $scope.from = $location.search().from;
    $scope.items = JSON.parse($location.search().items);
    $log.debug("from=" + $scope.from + ", items=" + $scope.items);
  });
})();

(function() {
  'use strict';

  angular
    .module('weddingApp')
    .controller('HotelsCtrl', HotelsCtrl);

  HotelsCtrl.$inject = ['$window'];

  function HotelsCtrl($window) {
    $window.scrollTo(0, 0);
  }
})();

(function() {
  'use strict';

  angular
    .module('weddingApp')
    .controller('VenueCtrl', VenueCtrl);

  VenueCtrl.$inject = ['$window'];

  function VenueCtrl($window) {
    $window.scrollTo(0, 0);
  }
})();

(function() {
  'use strict';

  angular
    .module('weddingApp')
    .controller('RegistryCtrl', RegistryCtrl);

  RegistryCtrl.$inject = ['$scope', '$log', '$location', '$window', '$http', 'localStorageService', 'simpleModalsSvc', 'cartSvc', 'appConfig'];

  function RegistryCtrl($scope, $log, $location, $window, $http, localStorageService, simpleModalsSvc, cartSvc, appConfig) {

    $window.scrollTo(0, 0);

    initialize();

    $scope.addToCart = addToCart;

    function addToCart(regItem, form) {
      $scope.isFS = true; // Is form submitted?

      if (form.$valid) {
        var cartItems = cartSvc.loadCartItems();
        $log.debug("Previous cart: " + JSON.stringify(cartItems));

        var newItem = { itemId: regItem.registryItemId, price: parseInt(regItem.selectedPrice), description: regItem.description, imageUrl: regItem.imageUrl };
        cartItems.push(newItem);

        $log.debug("Added new item: " + JSON.stringify(newItem));

        cartSvc.saveCartItems(cartItems);

        $window.location.href = "#/cart";
      } else {
        var errorMsg = "N/A";

        if (form.amount.$error.required) {
          errorMsg = "Please choose an amount for your gift.";
        } else if (form.description.$error.required) {
          errorMsg = "Please enter a description for your gift.";
        }

        simpleModalsSvc.openSimpleModal("Oops!", errorMsg, "sm");
      }
    }

    function initialize() {
      if (!localStorageService.isSupported) {
        simpleModalsSvc.openSimpleModal("Uh oh!", "It appears you are using an outdated browser that doesn't support our registry page. Please upgrade your browser if you would like to use it.", "md");
      }

      $scope.category = $location.search().category;

      if ($scope.category === undefined) {
        $scope.category = "none";
      } else {
        $http.get(appConfig.apiUrl + '/registryItems?category=' + $scope.category).success(function(data) {
          $log.debug("data: " + JSON.stringify(data));

          _.each(data, function(ri) {
            if (_.some(cartSvc.loadCartItems(), function(ci) { return ci.itemId === ri.registryItemId; })) {
              ri.isInCart = true;
            }
            if (ri.prices.length == 1) {
              // Auto-select price if there is only one choice
              ri.selectedPrice = ri.prices[0];
            }
          });
          $scope.registryItems = data;
        });
      }

      $log.debug("Registry category: " + $scope.category);

      setDefaults();
    }

    function setDefaults() {
      $scope.pages = [
        { id: "reg-trans", title: "Transportation", subtitle: "Subtitle", category: "transportation" },
        { id: "reg-accom", title: "Accommodations", subtitle: "Subtitle", category: "accommodations" },
        { id: "reg-dining", title: "Wining & Dining", subtitle: "Subtitle", category: "wining and dining" },
        { id: "reg-explore", title: "Explorations", subtitle: "Subtitle", category: "explorations" },
        { id: "reg-relax", title: "Relaxation", subtitle: "Subtitle", category: "relaxation" }
      ];
    }
  }
})();

(function() {
  'use strict';

  angular
    .module('weddingApp')
    .controller('RsvpCtrl', RsvpCtrl);

  RsvpCtrl.$inject = ['$scope', '$log', '$http', '$window', 'errorHandlingSvc', 'simpleModalsSvc', 'appConfig'];

  function RsvpCtrl($scope, $log, $http, $window, errorHandlingSvc, simpleModalsSvc, appConfig) {

    $window.scrollTo(0, 0);

    setDefaults();

    $scope.storeForms = storeForms;
    $scope.submit = submit;

    function storeForms(form1, form2) {
      if (form1 !== undefined) {
        $scope.selfForm = form1;
      }
      if (form2 !== undefined) {
        $scope.guestForm = form2;
      }
    }

    function submit() {
      $scope.isFS = true; // Is form submitted?

      // Validation
      var isFormValid = $scope.selfForm.$valid && (!$scope.rsvps[1].isActive || $scope.guestForm.$valid);
      var isAllValid = true;

      _.each($scope.rsvps, function(r) {
        if (r.isActive) {
          r.errAttdNotSelected = (!r.attdReception && !r.attdBoat && !r.attdNone);
          r.errAttdBadCombo = (r.attdNone && (r.attdReception || r.attdBoat));
          isAllValid = isFormValid && !r.errAttdNotSelected && !r.errAttdBadCombo;
        }
      });

      if (isAllValid) {
        $scope.isSubmitSuccess = true;

        var activeRsvps = _.filter($scope.rsvps, function(r) {
          return r.isActive;
        });
        _.each(activeRsvps, function(r) {
          // The submitter's information is in the first RSVP form
          r.submitterEmail = activeRsvps[0].email;
        });

        $log.debug(JSON.stringify(activeRsvps));

        $http.post(appConfig.apiUrl + '/rsvps', activeRsvps).
          success(function(data) {
            simpleModalsSvc.openSimpleModal("Success!", "We've received your RSVP. Thanks for responding!", "sm")
              .result.then(function (status) {
                $window.location.href = "#/home";
              });

            $log.debug("rsvp post reply: " + JSON.stringify(data));
          }).
          error(function(data, status) {
            errorHandlingSvc.handleHttpError("submitting your RSVP", status);
          });
      }
    }

    function setDefaults() {
      $scope.isFS = false;
      $scope.isSubmitSuccess = false;

      $scope.dinnerMenu = {
        'Sun-dried Tomato Chicken': 'Sun-dried Tomato, Artichoke & Basil Stuffed Chicken Breast, Golden Whipped Mashed Potatoes, Baby Vegetables, and a Balsamic Reduction',
        'Filet Mignon': 'Sea Salt Rosemary Encrusted Filet Mignon, Truffle Roasted Fingerling Potatoes and Grilled Asparagus',
        'Spinach & Portabella Mushroom': 'Jasmine Rice Topped with a Garlic and Spinach Saute, Grilled Summer Vegetables and Portabella Mushroom and drizzled with Balsamic Glaze and Basil Oil'
      };

      $scope.dinnerChoices = Object.keys($scope.dinnerMenu);

      $log.debug(Object.keys($scope.dinnerMenu));

      // Default values
      var rsvpSelf = {};
      rsvpSelf.guestType = "self";
      rsvpSelf.isActive = true;

      var rsvpGuest = {};
      rsvpGuest.guestType = "guest";
      rsvpGuest.isActive = false;

      $scope.rsvps = [rsvpSelf, rsvpGuest];

      _.each($scope.rsvps, function(r) {
        r.dinner = '';
        r.dessert = '';
        r.attdReception = false;
        r.attdBoat = false;
        r.attdNone = false;
      });
    }
  }
})();

/**
 * Created by Mike on 10/31/2015.
 */

(function() {
  'use strict';

  angular
    .module('weddingApp')
    .factory('errorHandlingSvc', errorHandlingSvc);

  errorHandlingSvc.$inject = ['$log', 'simpleModalsSvc'];

  function errorHandlingSvc($log, simpleModalsSvc) {
    var service = {
      handleHttpError: handleHttpError
    };
    return service;

    function handleHttpError(errorContext, statusCode) {
      $log.debug(format("Http error occurred. context={0}, statusCode={1}", errorContext, statusCode));
      return simpleModalsSvc.openSimpleErrorModal(errorContext);
    }
  }
})();

/**
 * Created by Mike on 11/8/2015.
 */

(function() {
  'use strict';

  angular
    .module('weddingApp')
    .controller('SimpleModalCtrl', SimpleModalCtrl);

  SimpleModalCtrl.$inject = ['$scope', '$modalInstance', 'title', 'message'];

  function SimpleModalCtrl($scope, $modalInstance, title, message) {
    $scope.title = title;
    $scope.message = message;

    $scope.ok = function () {
      $modalInstance.close('ok');
    };
  }
})();

/**
 * Created by Mike on 10/31/2015.
 */

(function() {
  'use strict';

  angular
    .module('weddingApp')
    .factory('simpleModalsSvc', simpleModalsSvc);

  simpleModalsSvc.$inject = ['$modal'];

  function simpleModalsSvc($modal) {
    var service = {
      openSimpleModal: openSimpleModal,
      openSimpleErrorModal: openSimpleErrorModal,
      openUnsentErrorModal: openUnsentErrorModal
    };
    return service;

    function openSimpleModal(title, message, windowSize) {
      return $modal.open({
        templateUrl: 'simple-ok-modal.html',
        controller: 'SimpleModalCtrl',
        backdrop: 'static',
        size: windowSize,
        resolve: {
          title: function() { return title; },
          message: function() { return message; }
        }
      });
    }

    function openSimpleErrorModal(errorContext) {
      return openSimpleModal("Uh oh!", "Sorry, something went wrong on our side " + errorContext + ". We'll be looking into the problem - please try again later.", "md");
    }

    function openUnsentErrorModal(errorContext) {
      return openSimpleModal("Uh oh!", "It looks like something went wrong " + errorContext + " - the information could not be sent. Please check your internet connection or try a different browser.", "md");
    }
  }
})();

/*
 * Source: http://stackoverflow.com/questions/14968690/sending-event-when-angular-js-finished-loading
 * Author: trusktr
 */

/*
 * The whenReady directive allows you to execute the content of a when-ready
 * attribute after the element is ready (i.e. done loading all sub directives and DOM
 * content except for things that load asynchronously like partials and images).
 *
 * Execute multiple expressions by delimiting them with a semi-colon. If there
 * is more than one expression, and the last expression evaluates to true, then
 * all expressions prior will be evaluated after all text nodes in the element
 * have been interpolated (i.e. {{placeholders}} replaced with actual values). 
 *
 * Caveats: if other directives exists on the same element as this directive
 * and destroy the element thus preventing other directives from loading, using
 * this directive won't work. The optimal way to use this is to put this
 * directive on an outer element.
 */

(function() {
  'use strict';

  angular
    .module('weddingApp')
    .directive('whenReady', ['$interpolate', function($interpolate) {
    return {
      restrict: 'A',
      priority: Number.MIN_SAFE_INTEGER, // execute last, after all other directives if any.
      link: function($scope, $element, $attributes) {
        var expressions = $attributes.whenReady.split(';');
        var waitForInterpolation = false;

        function evalExpressions(expressions) {
          expressions.forEach(function(expression) {
            $scope.$eval(expression);
          });
        }

        if ($attributes.whenReady.trim().length == 0) { return; }

        if (expressions.length > 1) {
          if ($scope.$eval(expressions.pop())) {
            waitForInterpolation = true;
          }
        }

        if (waitForInterpolation) {
          requestAnimationFrame(function checkIfInterpolated() {
            if ($element.text().indexOf($interpolate.startSymbol()) >= 0) { // if the text still has {{placeholders}}
              requestAnimationFrame(checkIfInterpolated);
            }
            else {
              evalExpressions(expressions);
            }
          });
        }
        else {
          evalExpressions(expressions);
        }
      }
    };
  }]);
})();
(function() {
  'use strict';

  angular
    .module('weddingApp')
    .controller('NavCtrl', NavCtrl);

  NavCtrl.$inject = ['$scope', 'cartSvc'];

  function NavCtrl($scope, cartSvc) {
    cartSvc.loadCartItems();
    $scope.cart = cartSvc.getCart();

    $scope.$watch(function() { return $scope.cart.items; }, function() {
      updateCartItemCount();
      updateIsCartCounterVisible();
    });

    $scope.tabs = [
      { path: "#/home", label: "Home" },
      { path: "#/venue", label: "Venue" },
      { path: "#/rsvp", label: "RSVP" },
      { path: "#/hotels", label: "Hotels" },
      { path: "#/registry", label: "Registry" },
      { path: "#/cart", label: "" }
    ];

    function updateCartItemCount() {
      $scope.cartItemCount = $scope.cart.items.length;
    }

    function updateIsCartCounterVisible() {
      $scope.isCartCounterVisible = ($scope.cart.items.length > 0);
    }
  }
})();

//# sourceMappingURL=data:application/json;base64,
